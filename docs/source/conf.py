# Configuration file for the Sphinx documentation builder.
#
# This file only contains a selection of the most common options. For a full
# list see the documentation:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#

import os
import sys
import sphinx_rtd_theme
from nwb_project_analytics.create_codestat_pages import create_codestat_pages
from nwb_project_analytics._version import get_versions


# sys.path.insert(0, os.path.abspath('.'))

# -- Support building doc without install --------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
# sys.path.insert(0, os.path.abspath('.'))

# Get the project root dir, which is the parent parent dir of this
cwd = os.getcwd()
project_root = os.path.dirname(os.path.dirname(cwd))
code_stat_pages_dir = os.path.join(os.path.dirname(__file__), 'code_stat_pages')
code_stat_data_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '../../data'))

# Insert the project root dir as the first element in the PYTHONPATH.
# This lets us ensure that the source package is imported, and that its
# version is used.
sys.path.insert(0, os.path.join(project_root, 'src'))

# -- Autodoc configuration -----------------------------------------------------

autoclass_content = 'both'
autodoc_docstring_signature = True
autodoc_member_order = 'bysource'


# -- Project information -----------------------------------------------------

project = 'nwb-project-analytics'
copyright = '2022, NWB Project Analytics'
author = 'Oliver Ruebel'

# The short X.Y version.
version = '{}'.format(get_versions()['version'])
# The full version, including alpha/beta/rc tags.
release = '{}'.format(get_versions()['version'])


# -- General configuration ---------------------------------------------------

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.napoleon',
    'sphinx.ext.intersphinx',
    # 'sphinx_gallery.gen_gallery',
    'sphinx_tabs.tabs',
    'sphinx_copybutton'
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
# language = None

# The suffix of source filenames.
source_suffix = '.rst'


# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns =  ['_build', 'test.py']

# The master toctree document.
master_doc = 'source/index'
master_doc = 'index'

# If true, '()' will be appended to :func: etc. cross-reference text.
add_function_parentheses = False

# sphinx tabs configuration
sphinx_tabs_valid_builders = ['linkcheck']



# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = "sphinx_rtd_theme"
html_theme_path = [sphinx_rtd_theme.get_html_theme_path()]

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
# html_logo = None
html_logo = '_static/analytics_page_logo.png'

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

html_theme_options = {
    # 'analytics_id': 'G-XXXXXXXXXX',  #  Provided by Google in your dashboard
    # 'analytics_anonymize_ip': False,
    'logo_only': False,  # Only show the NWB logo without the documentation title
    'display_version': True,  # show the version of the docs
    'prev_next_buttons_location': 'bottom',  # Show previous/next button at the bottom
    'style_external_links': True,  # Add marker to indicate external links
    'vcs_pageview_mode': '',
    'style_nav_header_background': 'darkgray',
    # Toc options
    'collapse_navigation': True,
    'sticky_navigation': True,
    'navigation_depth': 4,
    'includehidden': True,
    'titles_only': False
}


def run_apidoc(_):
    from sphinx.ext.apidoc import main as apidoc_main
    import os
    import sys
    out_dir = os.path.dirname(__file__)
    src_dir = os.path.join(out_dir, '../../src')
    sys.path.append(src_dir)
    apidoc_main(['-f', '-e', '--no-toc', '-o', out_dir, src_dir])


from abc import abstractproperty

def skip(app, what, name, obj, skip, options):
    if isinstance(obj, abstractproperty) or getattr(obj, '__isabstractmethod__', False):
        return False
    elif name == "__getitem__":
        return False
    return skip

def setup(app):
    app.connect('builder-inited', run_apidoc)
    # app.add_css_file("theme_overrides.css")
    app.connect("autodoc-skip-member", skip)
    # Create the codestatistic pages
    create_codestat_pages(
        out_dir=code_stat_pages_dir,
        data_dir=code_stat_data_dir,
        cloc_path="cloc",
        load_cached_results=True,
        cache_results=True,
        start_date=None,
        end_date=None,
        print_status=True)
